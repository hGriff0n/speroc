
todo:
 start working on the development plan (in _plan.txt)
   Rework literals to just write their value directly (no loading into register)
   Merge "parser/utils.h" with "util/utils.h" (or "util/parser.h")
   go back over the dev_work stuff (bring it up to date, make more diverse tests)
   see if there are any additional issues in my paper notes
 add in exception/error handling to make the compiler/parser usable
   adapt the compilation state structure to include an error-reporting framework
     figure out what that structure will need
	   error number and link to error location
	 make sure to distinguish between errors and warnings
	   setup interface to turn warnings into errors
   hook up parsing to report syntactical errors
 improve performance of the parsing stages
   create benchmark/performance suite for all stages
     improve logging interface/information
	   link stages to information in a usable way
	   improve reporting/collection of timing
   improve collection and memory usage of location data
   look at using std::string_view instead of std::string everywhere
   look at using attributes in the code
 answer the questions/improvements below
 exhaustively work over the language design to eliminate any issues/oversights
   explore the type system intricately
     consider allowing monomorphic compiler
       also start working on building it up
 start working on more complicated codegen/analysis
 move over to using llvm ir (and libraries)
   switch out x86 codegen for llvm ir (make sure this is a benefit)
   send the rest of the ir over to clang/llvm (need to wait for an update for VS 2017)

 parser improvements:
   re-enable "::" syntax for anonymous types
     changed to ":::" due to interference with type inference
     note: 'action<inf>' isn't triggered with "::"
	 could remove the optional tuple (this would allow me to remove the ast_seperator too)
   fncall node may have too much responsibility
   need to determine a distinction between semantic and syntactic typing in the ast
     depends in large part based on how I'm representing types internally
   determine whether I really need the "Future" node
   look into replacing 'std::string' with 'std::string_view' for ast prettyPrint
   look into moving pretty printing into the visitor model
   have the moduleDec rule collect everything as a single string

 compiler improvements:
   add in analysis passes for "_" lambdas utilizing ast.Future
     if "forwarded_from_fn" is false, then it is a lambda usage
	 also look at ways of pruning the creation of these "temporaries"
   modify module import syntax to allow for easy type aliasing

 tester improvements:
   look at adding "error" field to test.compile struct that specifies a file to compare compilation errors with

 Fix Spero
   Range grammar interfered with sequence grammar on the ',' (step)
   Figure out a better way to handle the duplication between rhs_inher and adt
     The old grammar causes the type name to be pushed on the stack twice
       I fixed this by adding the 'if<at>' rule, but I want to have a more focused rule

Icon at www.iconfinder.com/icons/606025/ancient_antique_historic_roman_rome_helmet_vintage_warrior_icon