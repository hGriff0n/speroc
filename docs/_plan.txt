Current Project State
  mutability => mutable-by-default [off-spec]
  types =>
    impl: hardcoded
	availability: standard-only
	generics: no
	inheritance: undetermined (not sure how inheritance will be handled, between Rust 'impl', C++ 'inheritance' or some mix)
    recognized => Int, Bool
	...
  variables => basic shadowing and scoping
  functions => main-only
  annotations => ignored

Current Project Plan
  Work on integrating the rust x86 interpreter
    Work on improving the rust code
	  Expand the available memory to work with
      TODO: Need to add in some offsetting to accomodate assumed stack values (like variables currently assume that esp is pushed on the stack, which isn't the case for initial runs)
	Add ability to "save state", make into true 'repl'
  Grammar changes and modifications
    Need to rework grammar to correctly handle paths
	  Need to allow for types and vars to intermix
	  Need to allow for arrays to be bound at any level in the heirarchy
	Add in syntax error checking and handling
	  Write rules/actions to report missing keywords/symbols
	    alias, type_assign, asgn_val, elsif_case, in_assign
	  Modify old code to use 'ValError' if possible
	  Find a solution to allow for 'ValError' type nodes to be considered as 'T' nodes
	    Can't use multiple inheritance of Ast types
		  Maybe I can have a set of type tags for the types that I need this behavior from
		  The relevant types would inherit from 'Ast' and the tag type (inheriting nothing from the tag)
	  Adapt rules/grammar to handle these new capabilities
	Fix issues with grammar
	  "match foo { 3 => 3 }" throws up an error with matching the '}' from a scope
	  "for a in a a" crashes the compiler because it's trying to report an error
	  Need to enable "3.return.if true" as a rewording of "if true return 3"
	Codebase Updates
	  Update to VS 15.3 capabilities
        "if (auto a = ...; ...)"
      "Const-correct" all variables, arguments, and methods
      Make sure Spero documentation is up-to-date
	    Update 'grammar.md' to reflect grammar
      Make sure documentation of ast nodes is up-to-date and helpful
	Syntax Improvement Considerations
	  Look into allowing generics to have default values (old grammar had this for ValueGeneric only)
	  Look into allowing "mut let i=0 in i" instead of "mut {let i=0 in i}" from `mvexpr`
	  Remove "static" keyword and adding in `<private>` keyword (just reserver `private` for now)
	    static would be replaced by the '@static' annotation
	  Look at modifying the grammar to allow for `anon_type` to be attached to `var_val`/`atom` calls (for metaprogramming)
	  Look into whether ptr styling can be forced to directly attach to the type
	  Allow for variables after type chains (to account for static variables/methods)
          Change binexpr to be left-associative (ie. "3 + 3 + 4" => "{3 + 3} + 4")
            Not sure if it's currently this way or not
	Language Considerations
	  Figure out a way to apply annotations to tuples
	    Possibly consider not attaching annotations directly at parse time (would allow for "@<var>!" syntax)
	  Figure out contexts to interpret "a :: T" as a type-check and not an annotation
	  Write down how function forwarding is going to be determined in lambdas
	    Utilize the same analysis pass that converts `plambda` to function declaration
	  Figure out how generic parameters are introduced/constrained in "impl"
  Add error/exception handling and reporting
	Adapt the parser and grammar to report errors
	  Look into utilising the 'raise'/'try_catch'/'try_catch_type' rules to add in error handling
	    A way to get custom error messages is to create custom rules specifically for these cases (that throw the exceptions)
	Move 'compiler' exceptions from log-level to error-level
	  Add in 'error indices' and automatic message population capbilities
	Add in 'xor' code to ensure that '%eax' has the correct value after 'set..' is used
	  Wouldn't this trigger the CPU flags that 'set..' uses ???
	Simplify the commands available within the repl
	  Also simplify the control path if possible
  Improve "help" support
    Look into adding "code of conduct"
  Language Logic Checking
    Figure out what type system I want to support
	  Ensure that it can be type-checked with the algebraic subtyping paper
	Figure out what concurrency systems I want to focus on
	Flesh out the rules for mutability restrictions
	  Ensure they maintain the semantics I want to have
    Figure out a way of simplifying mutable methods such as 'get'/'set'
      Find a way to make indexing really trivial (ie. reduce the number of rewrites)
      Thinking is whether I can find a way to cast 'mut' as a monad/HKT parameter
        The guess is you'd then be able to 'map' over it or something like that
	Figure out if ".3" should be an error or be an forwarded function
	Improve documentation, make sure it's up-to-date
	Work on language tutorial/introduction
  Basic Mutability Tracking
    Modify 'SymTable' to track the mutability of the variable (this can be done within the current system)
	Throw errors when a Reassign node attempts to change the value of an immutable variable
	Create some test code to test the mutability checking
  Basic Types
    Add in tracking of variable/value types within the AST
	  Ensure that 'malformed' expressions can throw up type errors
	Add in handling of explicit annotations for automatically setting the types 
      Ensure these explicit annotations throw up errors on unrecognized types
  Abstract variables collection, etc. into a separate analysis phase
    Rework the visitor system to allow for modification of sub-nodes
	Have new system change VarAssign to Reassign nodes (after collecting relevant information)
	  Ensure this new change interacts correctly with the mutability checking (including with shadowing)
    Change variables from being an entirely push/pop phenomenon (base of off ebp, preallocate stack space)
	  Split out storage of global/static values
	  Also be sure to "track" ebp offsets in a stack based fashion (for supporting local functions)
	Ensure this new system can handle "global" vars being defined post-facto
	  Ensure that we can also force variables to be defined "ahead of time"
	  Adapt 'use before declaration' errors to not be errors in the 'static' & 'type' contexts
	    Might be good to adopt a two-pass system
		  The first pass records all variable declarations and their location
		  The second pass records all variable usages and flags unused/forward-used/created variables
	Rearrange codegen (or modify interpreter) to prevent these systems from interferring with each other (for post-facto variables)
	Look into adding in language for recognizing compound operators
	  A compound operator would map to a reassign<var, operator<var, val>>
  Basic Function Definition
    Update x86_interpreter/codegen to be able to specify start instruction
	Ensure compiler recognition of function defs and calls works correctly
	Perform codgen of function definitions and ensure they do not interfere with normal compilation
	  These initial functions should just return a value into the 'eax' register
	Add in argument handling/setting for function definitions and calling
	  Might just have a full stack-based solution for now
	  Make sure each "function body" has a 'SymTable' attached to it (for argument setting)
	  Ensure that recursive functions work
	Handle global declarations correctly (ie. place these values in 'separate' memory)
	  Figure out how to handle these separate addressing schemes
	Allow for function bodies to be scopes (with their own local variables)
      Look at possibly modifying the ast to force function wrapping (except possibly in forwarded contexts)
	    Actually, declarations really only make sense (and are somewhat only possible) in functions that already have a scope
	    For all functions, unless a scope is linked by a following block, assume the scope is 'current'
	  TODO: Need to modify 'ebp_offset' setting of the symtable (particularly when accessing "global"/"parent" variables)
        This is accounting for the effects of changing the stack pointers
  Type Inference
    explicit annotations within the ast
  Basic Function Calling
  Custom type definition
  Improve system benchmark collection
  Improve command line interface collection
    Improve the handling of "flags" within the interpreter
  ...
  Converting Operators into function calls [ <- Needs mutability checking and references


# Note: Can take template+static_assert, or protected+public approaches to restrict allowable combinations