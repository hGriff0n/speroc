
todo:
 update compiler to reflect the current documentation
   document Byte to 0 out bits (round up to boundary)
 get clang assembly/linking working properly
 setup the "test" project and get testing started
 add in basic operator/function calls
   need to figure out how to abstract the name out
   needs to setup a symbol table
 add in exception/error handling to make the compiler/parser usable
   create a compiler error-reporting framework (also for collection)
 improve collection of location data in the parser (performance)
 answer the questions/improvements below
 exhaustively work over the language design to eliminate any issues/oversights
   explore the type system intricately
     consider allowing monomorphic compiler
	 also start working on building it up
 start working on more complicated codegen/analysis

 errors:
   "-" is interpreted as a unary way to greedily
     "-" and "2 ++ -" fail to parse
     "-(3, 4)" is a UnaryOp node instead of a FnCall
       this could possibly be resolved in analysis though (maybe in construction)

 organization
   consider changing the "main" project into a console that queries the compiler chain
     this would move the "compiler" project internals into a separate project
   figure out how gcc-assembler interaction will work
     think about renaming speroc so the interaction wrapper can have that name instead
   look at designing a non-graph intermediate representation

 language questions:
   look into changing rhs operator currying to have same semantics as lhs operator currying
     the only problem is in parsing issues and mitigating them
   figure out how concurrency is going to be handled
     should a yield without a wait equate to a straight return ???
   determine sugaring operations
   figure out the translation of operators fully
     look at scala's handling of '=' for a possible idea
   look into possibly allowing operators to not require parenthesis in indexing
     allow "3.+ 4" instead of "3.+(4)"
       difficult to parse though

 parser improvements:
   re-enable "::" syntax for anonymous types
     changed to ":::" due to interference with type inference
     note: 'action<inf>' isn't triggered with "::"
	 could remove the optional tuple (this would allow me to remove the ast_seperator too)
   fncall node may have too much responsibility
   need to determine a distinction between semantic and syntactic typing in the ast
     depends in large part based on how I'm representing types internally
   determine whether I really need the "Future" node
   look into replacing 'std::string' with 'std::string_view' for ast prettyPrint
   look into moving pretty printing into the visitor model
   have the moduleDec rule collect everything as a single string

 prettyPrinting improvements:
   "3 :: Array[Int]" has a wierd output buffering
   annotations could use some improvement

Fix Spero
  Range grammar interfered with sequence grammar on the ',' (step)
  Figure out a better way to handle the duplication between rhs_inher and adt
    The old grammar causes the type name to be pushed on the stack twice
      I fixed this by adding the 'if<at>' rule, but I want to have a more focused rule

Fixes Waiting for Other Features
  In-place modification of containers using for loops/iterators
    Waiting for: Implementation of standard containers and iterators

Breaking Codes