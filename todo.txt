
todo:
 add in operator precedence rules
   use scala rules for now (might just restrict precedence to language operators, all other are lowest)
 add in error recognition to the parser
 update documentation
 work on blog posts
  
"match (3, 4) { x, y -> 4 (y) -> 3 }"
   "4 (y)" interpreted as a function call "->" should be an error

 language questions:
   update documentation to reflect the current language
     need to delve back into the more "design" parts of the language
   add ability to restrict match patterns
     "x :: Int" would only match int values, "x" would match anything
	 need way to match on conditions (ala "x if x < 3 -> ..." )
   figure out how concurrency is going to be handled
   should a yield without a wait equate to a straight return ???
   determine sugaring operations
      behavior for '()' operations
	    scala uses apply and update

 parser improvements:
   re-enable "::" syntax for anonymous types
     changed to ":::" due to interference with type inference
     note: 'action<inf>' isn't triggered with "::"
	 could remove the optional tuple (this would allow me to remove the ast_seperator too)
   fix the annotation system so that global annotations aren't assigned to statements
   fncall node may have too much responsibility
   need to determine a distinction between semantic and syntactic typing in the ast
     depends in large part based on how I'm representing types internally

 grammar improvements:
   fix dot_ctrl operations in regards to function forwarding
     might need to add them in first
	 current definitions will attempt to work with values that aren't there
   add in operator precedence
     first determine operator precedence
	   scala uses the first character in the operator (https://github.com/ghik/opinionated-scala/wiki/Methods-and-operators)

 prettyPrinting improvements:
   "3 :: Array[Int]" has a wierd output buffering
   annotations could use some improvement

Fix Spero
  Range grammar interfered with sequence grammar on the ',' (step)
  Figure out a better way to handle the duplication between rhs_inher and adt
	The old grammar causes the type name to be pushed on the stack twice
	  I fixed this by adding the 'if<at>' rule, but I want to have a more focused rule
  Figure out the rules and abilities of pointers and manual memory

Fixes Waiting for Other Features
  In-place modification of containers using for loops/iterators
    Waiting for: Implementation of standard containers and iterators


Things I've Learned
  Alt-click is vs-codes way of ctrl-click in sublime