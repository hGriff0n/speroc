Current Project State
  mutability => mutable-by-default [off-spec]
  types =>
    impl: hardcoded
	availability: standard-only
	generics: no
	inheritance: undetermined (not sure how inheritance will be handled, between Rust 'impl', C++ 'inheritance' or some mix)
    recognized => Int, Bool, ~Byte, ~Char
	...
  variables => partially-supported
  functions => main-only
  annotations => ignored

Current Project Plan
  Work on integrating the rust x86 interpreter
    Remove 'panic!' from codebase (really bad working)
    Work on improving the rust code
	  Expand the available memory to work with
      TODO: Need to add in some offsetting to accomodate assumed stack values (like variables currently assume that esp is pushed on the stack, which isn't the case for initial runs)
  Extend SymTable working to scopes (ie. have scoped declarations)
	Look into rewritting visitor framework from ground up
	  Current design isn't extremely amenable to replacement modifications (changing the type of the node)
	  This is because any modifications are performed from the perspective of the child node, not the parent
	Add in variable recognizer analysis phase (require modification work)
	  Should simplify some of the codegen (change assign vars to reassign nodes, except for main)
	Generalize reassignment behavior to work on compound operators
	  Change the parser to change reassign/compound operators to the new ast node
	    NOTE: This would require me to "accept" compound operators (I'm not sure about this)
	  Add a way to work with the memory location of a variable
	    Extend this solution to literals and see if we can handle stuff that way
    Change variables from being an entirely push/pop phenomenon (base of off ebp, preallocate stack space)
	Ensure that the 'return value' of a scope is handled correctly
	Find a way to add 'assignXX' visitation back in (may be rolled into the analysis phase)
  Extend SymTable working into functions
    Look at possibly modifying the ast to force function wrapping (except possibly in forwarded contexts)
	  Actually, declarations really only make sense (and are somewhat only possible) in functions that already have a scope
	  For all functions, unless a scope is linked by a following block, assume the scope is 'current'
	TODO: Need to extend function symtable support with the function arguments
	TODO: Need to modify 'ebp_offset' setting of the symtable, to change for 
  Extend SymTable working into types
    Ensure that order-of-declaration errors can be caught and reported in functions/scopes
    TODO: Figure out how to prevent accessing variables that are declared after the current statement
	  Well there are some contexts that I want to enable that behavior and some that I don't
	  Function bodys and normal scopes have this behavior, types and globals don't
	    Sometimes functions don't have an associated block, may need to modify ast to add one in
	  TypeAssign is set to take a block for defining the methods (can't rely on ast behavior, need to track in_type_or_global)
		But Variables are going to be tracked in one pass, can't utilize a 'in_type_or_global' flag
	    I'll need to track the "statement" id (or something like that) when working through the ast
	  There's a possibility I could put this into a CFG-style pass, but I feel that doesn't handle some cases (particularly mutability shadowing)
		(ie. "let a = mut a" is an analysis stage only, "let a = b + a" is a value change, though it can reuse the old address)
  Improving Assembly generation for operators
    Perform direct usage if possible (ie. "3 + 4" -> "mov 3, eax;add 4, eax;" not "mov 3, eax; push eax; mov 4, eax; add (esp), eax; add 4, esp;")
	  Also directly utilize stack locations for adding/storing variables
  Basic Mutability Tracking
    Create "check_mutability" analysis phase
	Create some test code to test the mutability checking
	Move sym table collection into an analysis phase
  Add error/exception handling and reporting
    Add in storage and reporting structures to CompilationState
	Adapt the analysis and codegen phases to report errors to the CompilationState
	Work on error formatting and display onto the command line
	Adapt the parser and grammar to report errors
	  Ensure that as many syntax mistakes are caught as posible
	Adapt the stages to be exception safe 
	  Add in "noexcept" declarations
	  Ensure that everything is "const" declared (if possible)
  Basic Types
    value/variable => type
  Type Inference
    explicit annotations within the ast
  Basic Function Definition
  Basic Function Calling
  Improve system benchmark collection
  Improve command line interface collection
  ...
  Converting Operators into function calls [ <- Needs mutability checking and references


# Note: Can take template+static_assert, or protected+public approaches to restrict allowable combinations