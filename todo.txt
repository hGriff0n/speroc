
todo:
 work on blog posts
 add conditional match syntax
 add operator currying syntax
 add in error recognition to the parser
 update documentation

 language questions:
   update documentation to reflect the current language
     need to delve back into the more "design" parts of the language
   figure out how concurrency is going to be handled
   should a yield without a wait equate to a straight return ???
   determine sugaring operations
      behavior for '()' operations
	    Indexable[T] -> get(Size), set(Size, T)
	    scala uses apply and update
   figure out the translation of operators fully
     especially for '&' and '=', given they have special meanings in some conditions
	   maybe make special ast nodes to represent them
	   scala handling of '=' at the end (using "l += r")
	     if no matching definition "+=" for can be found
		   statement translates to "l = +(l, r)"
		 otherwise translates to "+=(l, r)"
	  might be changing the semantics of pointers so '&' aren't needed
   look at changing the semantics of pointers to java semantics (ie. reference)

 parser improvements:
   re-enable "::" syntax for anonymous types
     changed to ":::" due to interference with type inference
     note: 'action<inf>' isn't triggered with "::"
	 could remove the optional tuple (this would allow me to remove the ast_seperator too)
   fncall node may have too much responsibility
   think of splitting Range into Range and InfRange nodes
     just need to be sure that infinite ranges can be easily noted
   maybe change translation of operator calls
     need to check for definitions within the type body first
   need to determine a distinction between semantic and syntactic typing in the ast
     depends in large part based on how I'm representing types internally

 prettyPrinting improvements:
   "3 :: Array[Int]" has a wierd output buffering
   annotations could use some improvement

Fix Spero
  Range grammar interfered with sequence grammar on the ',' (step)
  Figure out a better way to handle the duplication between rhs_inher and adt
	The old grammar causes the type name to be pushed on the stack twice
	  I fixed this by adding the 'if<at>' rule, but I want to have a more focused rule
  Figure out the rules and abilities of pointers and manual memory

Fixes Waiting for Other Features
  In-place modification of containers using for loops/iterators
    Waiting for: Implementation of standard containers and iterators


Things I've Learned
  Alt-click is vs-codes way of ctrl-click in sublime