Current Project State
  mutability => mutable-by-default [off-spec]
  types =>
    impl: hardcoded
	availability: standard-only
	generics: no
	inheritance: undetermined (not sure how inheritance will be handled, between Rust 'impl', C++ 'inheritance' or some mix)
    recognized => Int, Bool (literals and comparison operators)
	...
  variables => basic shadowing and scoping
  functions => main-only
  annotations => ignored

Current Project Plan
  Convert all x86 touching code over to using AsmJit
    Remove the arch and AsmEmitter files
	Change formatting rule for new lined functions/etc. (C++ code)
	  open brace goes on a new line
	Perform some more research on AsmJit
	  Figure out how asmjit handles the memory of deleted nodes (don't want memory leaks)
	  Figure out how labels interact with assembly generation
	    ```
	    Label loop = emit.newLabel();
	    emit.jz(loop)
	    ```
	  Find out whether the interface follows intel or at&t semantics (my guess: intel)
	Add a new interpreter stand-in (same semantics)
	  May need to add similar declaration additions to AsmTk (can just ignore)
	  Completely remove the rust dependencies
	Figure out how to add my AsmJit additions into the readme production
	  Also need to add in references to all dependencies in README
	  Make sure dependency usage satisfies licensing
	Adapt new interpreter to have the capability to have "re-entrant evaluation"
	  NOTE: The better part of this step would be in compiler variable tracking
	Convert assembly compilation to use clang instead of gcc
  Basic Mutability Tracking
    Ensure operator compilation proceeds correctly
	  The comparison operators don't work
	    Either because I put the values in the wrong spots or my interpreter is wrong
	  Basically fix emitted code to handle realizations about how assembly performs
	Add in code to handle reassignment and compound assignment
	  Didn't I remove compound assignment from the language ???
    Modify 'SymTable' to track the mutability of the variable
	  Look into abstracting this out into a "collection" pass
	    This would probably be the start of a generic "variable" finding pass (ie. type inference, etc)
	Modify reassignment code to throw out an error when the variable is immutable
	  Look into abstracting this out to an analysis pass
	    We could do this within the current framework, if necessary
	Create some test code to test the mutability checking (might be done)
  Language Logic Checking
	Look into allowing "def Foo = Foo[Int]" type syntax
	  Reconsider a lot of the grammar for types definition, particularly for specializing generics
    Determine how "Array[Int, a]" would be resolved if a is a global constant
	Figure out contexts to interpret "a :: T" as a type-check and not an annotation
    Figure out what type system I want to support
	  Ensure that it can be type-checked with the algebraic subtyping paper
	  Figure out how generic parameters are introduced/constrained in "impl"
	Flesh out the rules for mutability restrictions
	  Ensure they maintain the semantics I want to have
	Figure out what concurrency systems I want to focus on
    Figure out a way of simplifying mutable methods such as 'get'/'set'
      Find a way to make indexing really trivial (ie. reduce the number of rewrites)
      Thinking is whether I can find a way to cast 'mut' as a monad/HKT parameter
        The guess is you'd then be able to 'map' over it or something like that
	Figure out if ".3" should be an error or be an forwarded function
	Figure out a way to apply annotations to tuples
	  Possibly consider not attaching annotations directly at parse time (would allow for "@<var>!" syntax)
	Improve documentation, make sure it's up-to-date
	  Add "accepted change" to require pointer styling to be connected to type name (grammar currently adds a 'ig_s' after)
	  Write down how function forwarding is going to be determined in lambdas
	    Utilize the same analysis pass that converts `plambda` to function declaration
    Add "accepted change" to modify the grammar to allow for 'anon_type' to be attached to `var_val`/`atom` calls (for metaprogramming)
	    Basically remove the requirement to have "Foo() :: {}", instead allow "Foo :: {}"
		NOTE: This should enable easy type creation syntax (look out for possible interactions here too)
	Work on language tutorial/introduction
  Convert to using a tri-code IR (ie. max two operands to any instruction)
	Backend stage would take this IR and optimize it to produce the final assembly
	The current 'assembly' stage would be replaced with an IR-generation stage

  Work on integrating the rust x86 interpreter
    Work on improving the rust code
	  Expand the available memory to work with
      TODO: Need to add in some offsetting to accomodate assumed stack values (like variables currently assume that esp is pushed on the stack, which isn't the case for initial runs)

  Code Quality Improvements
    Const-correct codebase where possible
	Update to utilize VS 15.5 features where possible (not I'm on 15.4 currently)
	  Switch some std::string applications to use std::string_view
	Simplify the commands available within the repl
	  Also simplify the control path if possible
  Convert to clang/llvm backend
    Adapt interpreter to accept the clang output format
    Switch over to compiling the assembly files with clang
	  Some instructions are different (clang appears to be in 64-bit mode)
	  Adapt AsmGenerator to output the expected clang syntax
	Integrate in the llvm compiler library
  Improve error/exception handling and reporting
    Move around logging statements (when combined with push) to reuse location data (see if that makes an improvement first)
	Move 'compiler' exceptions from log-level to error-level
	  Add in 'error indices' and automatic message population capbilities
  Improve "help" support
    Look into adding "code of conduct"

  Basic Types
    Add in tracking of variable/value types within the AST
	  Ensure that 'malformed' expressions can throw up type errors
	Add in handling of explicit annotations for automatically setting the types 
      Ensure these explicit annotations throw up errors on unrecognized types
    Add in unsigned integers, boolean, and float types
	  Extend assembly interpreter with floating point instructions
  Abstract variables collection, etc. into a separate analysis phase
    Rework the visitor system to allow for modification of sub-nodes
	Have new system change VarAssign to Reassign nodes (after collecting relevant information)
	  Ensure this new change interacts correctly with the mutability checking (including with shadowing)
    Change variables from being an entirely push/pop phenomenon (base of off ebp, preallocate stack space)
	  Split out storage of global/static values
	  Also be sure to "track" ebp offsets in a stack based fashion (for supporting local functions)
	Ensure this new system can handle "global" vars being defined post-facto
	  Ensure that we can also force variables to be defined "ahead of time"
	  Adapt 'use before declaration' errors to not be errors in the 'static' & 'type' contexts
	    Might be good to adopt a two-pass system
		  The first pass records all variable declarations and their location
		  The second pass records all variable usages and flags unused/forward-used/created variables
	Rearrange codegen (or modify interpreter) to prevent these systems from interferring with each other (for post-facto variables)
	Look into adding in language for recognizing compound operators
	  A compound operator would map to a reassign<var, operator<var, val>>
  Basic Function Definition
    Update x86_interpreter/codegen to be able to specify start instruction
	Ensure compiler recognition of function defs and calls works correctly
	Perform codgen of function definitions and ensure they do not interfere with normal compilation
	  These initial functions should just return a value into the 'eax' register
	Add in argument handling/setting for function definitions and calling
	  Might just have a full stack-based solution for now
	  Make sure each "function body" has a 'SymTable' attached to it (for argument setting)
	  Ensure that recursive functions work
	Handle global declarations correctly (ie. place these values in 'separate' memory)
	  Figure out how to handle these separate addressing schemes
	Allow for function bodies to be scopes (with their own local variables)
      Look at possibly modifying the ast to force function wrapping (except possibly in forwarded contexts)
	    Actually, declarations really only make sense (and are somewhat only possible) in functions that already have a scope
	    For all functions, unless a scope is linked by a following block, assume the scope is 'current'
	  TODO: Need to modify 'ebp_offset' setting of the symtable (particularly when accessing "global"/"parent" variables)
        This is accounting for the effects of changing the stack pointers
  Type Inference
    explicit annotations within the ast
  Basic Function Calling
  Custom type definition
  Improve system benchmark collection
  Improve command line interface collection
    Improve the handling of "flags" within the interpreter
  ...
  Converting Operators into function calls [ <- Needs mutability checking and references


# Note: Can take template+static_assert, or protected+public approaches to restrict allowable combinations