
todo:
 figure out how the compiler is supposed to operate
   project setup and organization
     start creating an "implementation" checklist
       list of unimplemented/incomplete features and guarantees plus needed implementation steps
     maybe also reorganize the file/project structure as well
	 build up tests in test.yaml
	   add in error reporting first
   work on laying out what passes need to occur
     basic structural framing and comments
     improve comments within the project
   get basic functional codegen setup and working
     be able to add two integers into a chosen register
     be able to store and use variables
     create, store, and call spero functions
     basic type-checking and inference (set up the pass at least)
      operator -> function translation
   Automatically delete temporary assembly files after compilation
     Add in special command argument to handle this workflow
     Adapt the test runner to use the command when needing to test assembly file
 add in exception/error handling to make the compiler/parser usable
   create a compiler error-reporting framework (also for collection)
 improve performance of the parsing stages
   first benchmark the performance of the parsing stages
     need to create a performance suite as well
       also create compilation logging (especially for reporting timing)
       switch compilation logging over to the new system
   improve collection and memory usage of location data
   look at using std::string_view instead of std::string everywhere
   can I use attributes in any way
 answer the questions/improvements below
 exhaustively work over the language design to eliminate any issues/oversights
   explore the type system intricately
     consider allowing monomorphic compiler
       also start working on building it up
 start working on more complicated codegen/analysis
 get clang assembly/linking working properly
   apparently clang depends on visual studio 2012 being installed (or the library/include files at least)

 errors:
   "-" is interpreted as a unary way to greedily
     "-" and "2 ++ -" fail to parse
     "-(3, 4)" is a UnaryOp node instead of a FnCall
       this could possibly be resolved in analysis though (maybe in construction)
   possibly add in "error" field for test.compile struct (file to compare compilation errors to)

 organization
   figure out how gcc-assembler interaction will work
     think about renaming speroc so the interaction wrapper can have that name instead
   look at designing a non-graph intermediate representation (returned by analysis stage)

 language questions:
   look into changing rhs operator currying to have same semantics as lhs operator currying
     the major problem is in parsing issues and mitigating them
   figure out how concurrency is going to be handled
     should a yield without a wait equate to a straight return ???
   determine sugaring operations
   figure out the translation of operators fully
     look at scala's handling of '=' for a possible idea
   look into possibly allowing operators to not require parenthesis in indexing
     allow "3.+ 4" instead of "3.+(4)"
       difficult to parse though
   how do unary operators get specialized ???

 parser improvements:
   re-enable "::" syntax for anonymous types
     changed to ":::" due to interference with type inference
     note: 'action<inf>' isn't triggered with "::"
	 could remove the optional tuple (this would allow me to remove the ast_seperator too)
   fncall node may have too much responsibility
   need to determine a distinction between semantic and syntactic typing in the ast
     depends in large part based on how I'm representing types internally
   determine whether I really need the "Future" node
   look into replacing 'std::string' with 'std::string_view' for ast prettyPrint
   look into moving pretty printing into the visitor model
   have the moduleDec rule collect everything as a single string

 prettyPrinting improvements:
   "3 :: Array[Int]" has a wierd output buffering
   annotations could use some improvement

Fix Spero
  Range grammar interfered with sequence grammar on the ',' (step)
  Figure out a better way to handle the duplication between rhs_inher and adt
    The old grammar causes the type name to be pushed on the stack twice
      I fixed this by adding the 'if<at>' rule, but I want to have a more focused rule

Fixes Waiting for Other Features
  In-place modification of containers using for loops/iterators
    Waiting for: Implementation of standard containers and iterators

Breaking Codes