
todo:
 start working on the development plan (in _plan.txt)
   Reduce register usage levels when working with literals
     The end goal is that "3 + 4" should compile down to "mov $4, %eax\nadd $3, %eax" ("mov $7, %eax" is a bit farther down the pipeline)
	   NOTE: I think this requires a SSA-style IR (not really possible in our AST-IR)
	 Additionally, need to consider reordering operator calls if a literal is involved to reduce loads
   Work on the testing framework/runners a bit (make more diverse tests)
   see if there are any additional issues in my paper notes
 improve performance of the parsing stages
   create benchmark/performance suite for all stages
     improve logging interface/information
	   link stages to information in a usable way
	   improve reporting/collection of timing
   improve collection and memory usage of location data
   look at using std::string_view instead of std::string everywhere
   look at using attributes in the code
 answer the questions/improvements below
 exhaustively work over the language design to eliminate any issues/oversights
   explore the type system intricately
     consider allowing monomorphic compiler
       also start working on building it up
 start working on more complicated codegen/analysis
 move over to using llvm ir (and libraries)
   switch out x86 codegen for llvm ir (make sure this is a benefit)
   send the rest of the ir over to clang/llvm (need to wait for an update for VS 2017)

 parser improvements:
   fncall node may have too much responsibility
   need to determine a distinction between semantic and syntactic typing in the ast
     depends in large part based on how I'm representing types internally
   look into replacing 'std::string' with 'std::string_view' for ast prettyPrint
   look into moving pretty printing into the visitor model

 compiler improvements:
   add in analysis passes for "_" lambdas utilizing ast.Future
     if "forwarded_from_fn" is false, then it is a lambda usage
	 also look at ways of pruning the creation of these "temporaries"
   modify module import syntax to allow for easy type aliasing
   ensure that tuple switching (ie. "(a, b) = (b, a)") just rotates the internal locations (ie. no instruction)
   improve the displaying of compiler errors
     have a collection of error 'id's ???
	 link in printing of the source code the creates the error

 tester improvements:
   look at adding "error" field to test.compile struct that specifies a file to compare compilation errors with


Icon at www.iconfinder.com/icons/606025/ancient_antique_historic_roman_rome_helmet_vintage_warrior_icon