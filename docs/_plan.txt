Current Project State
  mutability => immutable-by-default
  types =>
	custom: unimplemented
	generics: unimplemented
	inheritance: undetermined (not sure how inheritance will be handled, between Rust 'impl', C++ 'inheritance' or some mix)
    recognized => Int, Bool (literals and comparison operators)
	...
  variables => basic shadowing and scoping
  functions => recursion support, no type checking, decl before use, no OOP
  annotations => ignored

Current Project Plan
  Add in LLVM IR production stage
    Merge the llvm-ir branch into master
	  Improve documentation and update readme
	  Unify _todo.txt and _plan.txt/_dev_plan.txt
		
  Type Inference and Type Checking
    Read up on the MLsub type inference - see if I can figure out how to implement it
	  Implement a toy algorithm inside of a smaller program (with hardcoded types, etc.)
	  Transfer the toy algorithm over to this program
	Figure out how to load type information into the symbol table
	  Look at modifying the symbol table implementation to instead have a "flattened" approach
	    Particularly after the initial parsing and variable mapping work, we can create a unique name for every variable
		There's may also be some benefit in translating everything into a more "LLVM"-esque ast/ir
		  Pre-handling type conversions/etc where necessary, unravelling tuples and other non-llvm constructs
	Intermediate Type Work (maybe)
	  Come up with a quick way to get from a Variable/Binding ast node to it's symbol table information
	    This would be quicker than running the full symbol table query
	  Add in assembly instructions specific for floats and booleans
	    Look at generalizing the binopcall assembly generation to account for type differences
	  Add in assembly steps for interacting with tuples
	    Implement AssignTuple assignment rule
		Implement indexing in the case that the indexed type is a tuple (and the index is an int literal)
		Abstract the assignment rules to simplify the logic
		  For an AssignTuple pattern, split into a series of 'AssignName' (only issue is regarding when scopes come into effect)
	  Allow for the creation and usage of custom types
	    Would need to create constructors, automatic destructor insertion, OOP function translation, struct typing
	  Implement generalized code for translating spero types into llvm types
	    Also implement a way of properly resolving int/float/etc. typing difficulties when selecting llvm ir instructions

  Get functions working properly
	Look into how to support local functions/closures
	  Figure out a better way of tracking ebp/etc. so that local variables are accessable
	    This work would mostly be done in terms of the global functions
		  However, I need to consider non-local functions for true generality
	  Figure out where I would have to store the function data in order for it to be usable
	    NOTE: I only need to consider this problem from the widest possible standpoint (any optimizations can be done later)
		  They could be inlined in some cases (if they're never used outside of the function), but starting there would be terrible design
    Convert operators to method calls
	  Create a system for harcoding in spero implementations (for now)
	    Eventually this will be replaced by spero code, but that requires asm/IR and modules to be completed first
	  Convert operator calls to being function calls (instead of hardcoded assembly calls)
	  Implement basic type-checking/etc. to automatically select the correct functions based on operand types
	  Implement boolean short-circuiting for && and ||
	    Will require hard-coding these checks in the compiler (as methods automatically evaluate first)
	Enable declaring functions after usage
	Integrate functions into the type system
	  Figure out how to get function types working as distinct types
	  Add in experimental code to the arguments to allow for restricting based on the type

  Fix grammar and ast properties
    Require directly affixing pointers and references to types
    Allow anon_type to be attached after 'var_val/atom' rules
  Modules and Imports

  Tester Improvements
    Move to utilizing a directory based test system
	  Test "collections" will be determined by the folder they are in
	    Inside these folders is the yaml specifying expected behavior
		Individual tests may be able to run (ie. only run tests associated with collection.file)
	Have specific error messages for when an input file doesn't exist/etc
	  Generalize this to all "preconditions" (and postconditions)
    Have tester produce an output file specifying how many tests have passed
    Integrate this project with Jenkins CI

  Language Logic Checking
    Check if ':<var>' is (and should be) a legal typing
	  Another option is to reserve a keyword (such as "__global__")
	  Adjust the interpreter accordingly (':XX' are commands)
	Look into allowing "def Foo = Foo[Int]" type syntax
	  Reconsider a lot of the grammar for types definition, particularly for specializing generics
    Determine how "Array[Int, a]" would be resolved if a is a global constant (in the context of specialization)
	Figure out contexts to interpret "a :: T" as a type-check and not an annotation
    Figure out what type system I want to support
	  Ensure that it can be type-checked with the algebraic subtyping paper
	  Figure out how generic parameters are introduced/constrained in "impl"
	Flesh out the rules for mutability restrictions
	  Ensure they maintain the semantics I want to have
	Figure out what concurrency systems I want to focus on
    Figure out a way of simplifying mutable methods such as 'get'/'set'
      Find a way to make indexing really trivial (ie. reduce the number of rewrites)
      Thinking is whether I can find a way to cast 'mut' as a monad/HKT parameter
        The guess is you'd then be able to 'map' over it or something like that
	  Find an interface that incourages slices (good range interop)
	Improve documentation, make sure it's up-to-date
	  Write down how function forwarding is going to be determined in lambdas
	    Utilize the same analysis pass that converts `plambda` to function declaration
	Junction typing syntax sometimes trips up common use cases (`3 :: Int + 4 :: Int` doesn't work)
	Look at re-allowing paren-less functions
	String should be unicode by default
	  I am still undecided about how that should be produced to the users
	    Provide utf-X byte points (ie. strings are arrays)
		Grapheme Clusters (Unicode defined "characters")
		"collation sequential primary element" (apparently a bit more natural "characters")
	  https://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/
	For simplicity sake, I'm going to work off of the initial assumption that types are laid out like in C
	  This assumption may change in the future, particularly to pack, so code should not depend on it
	I'm going full-in on Rust-style impl blocks for adding type inheritance/etc.
	  However, I want to relax the rules a bit (allow for defining traits at junction points, allow for defining traits through "this exists" [free function dispatch (can just do assignment)])
	  I'll also maintain the usage of impl blocks only for inheritance / type fitting
	    You can still define type specific methods inside of the declaration block
	Work on language tutorial/introduction

  Code Quality Improvements
    Change the test suit to have a folder-based organization structure
	  Instead of having the yaml file differentiate between the literal and function tests, the directory structure handles that difference
	  Each directory will have a yaml file listing out the expected results of the tests (at that level)
	    If a specific test suite is entered (such as literal.ints) then only the tests in the "literal/ints" folder will be run
	Look at introducing an intermediate IR in between the AST and the llvm ir production
	  Definitely need to flatten the symbol table to improve lookup behavior
	  There's also a couple pieces of information that we may want to add in, but can't fit into the existing AST structure
	    ie. TypeAssign will need to be translated to a `member + methods + mutable` tuple instead of the `conslist + body + mutable` tuple we have
	LLVM has a pre-existing optimization level interface, use that instead of my enum hack
	  This is what we have in the `optimizeLlvm` code

  Improve error/exception handling and reporting
    Move around logging statements (when combined with push) to reuse location data (see if that makes an improvement first)
	Add in 'error indices' and automatic message population capbilities
    Add a better interaction between the ast classes and the logging system
      Improve the logging system while I'm at it (different log outputs, linked/combined loggers, etc.)
	Add in phase timing support using a 'PhaseTimer' style interface (see `compile` for usage)
	Modify the grammar to support unicode in strings
	  Look into allowing unicode in variable names

  Improve "help" support
    Look into adding "code of conduct"

  Custom type definition
  Improve system benchmark collection
  Improve command line interface collection
    Improve the handling of "flags" within the interpreter
  ...
  Converting Operators into function calls <- Needs mutability checking and references
  Allow for unicode variable names
