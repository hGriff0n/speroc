Current Project State
  mutability => mutable-by-default [off-spec]
  types => impl: hardcoded, availability: standard-only, generics: no, inheritance: unk
    recognized => Int, Bool, ~Byte, ~Char
	...
  variables => unsupported
  functions => main-only
  annotations => ignored

Current Project Plan
  Work on integrating the rust x86 interpreter
    Implement the needed instructions (particularly push and pop)
    Look into moving to the 'dep' folder
    Work on improving the rust code
      TODO: Need to add in some offsetting to accomodate assumed stack values (like variables currently assume that esp is pushed on the stack, which isn't the case for initial runs)
  Fix updating pegtl to the recent version
    Need to reget 'location data' from the input structure
  Extend SymTable working to scopes (ie. have scoped declarations)
    Look at incorporating the code-generation changes (as laid out in 'todo.txt')
    Have a 'SymTable*' in the AsmGenerator structure (<- already done)
	When entering a Scoped context, load the scope's symtable to the AsmGenerator (<- done)
	Add in code to SymTable::getVar to perform scoped lookup (<- done)
	  Add in code to offset scoped lookup properly (<- done)
	When exiting a Scoped context, the old symtable is restored in the AsmGenerator (<- done)
	Add in really basic scope cleanup code (ie. pop) (<- done)
	Variable/Fn lookup continues as before, just index into the symtable (<- done)
	TODO: Add in handling of '=' when the lhs is a variable
	TODO: Add in scope 'return value' code
  Extend SymTable working into functions
    Look at possibly modifying the ast to force function wrapping (except possibly in forwarded contexts)
	  Actually, declarations really only make sense (and are somewhat only possible) in functions that already have a scope
	  For all functions, unless a scope is linked by a following block, assume the scope is 'current'
	TODO: Need to extend function symtable support with the function arguments
	TODO: Need to modify 'ebp_offset' setting of the symtable, to change for 
  Extend SymTable working into types
    Ensure that order-of-declaration errors can be caught and reported in functions/scopes
    TODO: Figure out how to prevent accessing variables that are declared after the current statement
	  Well there are some contexts that I want to enable that behavior and some that I don't
	  Function bodys and normal scopes have this behavior, types and globals don't
	    Sometimes functions don't have an associated block, may need to modify ast to add one in
	  TypeAssign is set to take a block for defining the methods (can't rely on ast behavior, need to track in_type_or_global)
		But Variables are going to be tracked in one pass, can't utilize a 'in_type_or_global' flag
	    I'll need to track the "statement" id (or something like that) when working through the ast
	  There's a possibility I could put this into a CFG-style pass, but I feel that doesn't handle some cases (particularly mutability shadowing)
		(ie. "let a = mut a" is an analysis stage only, "let a = b + a" is a value change, though it can reuse the old address)
  Improving Assembly generation for operators
    Perform direct usage if possible (ie. "3 + 4" -> "mov 3, eax;add 4, eax;" not "mov 3, eax; push eax; mov 4, eax; add (esp), eax; add 4, esp;")
	  Also directly utilize stack locations for adding/storing variables
  Basic Mutability Tracking
    Create "check_mutability" analysis phase
	Create some test code to test the mutability checking
	Move sym table collection into an analysis phase
  Add error/exception handling and reporting
    Add in storage and reporting structures to CompilationState
	Adapt the analysis and codegen phases to report errors to the CompilationState
	Work on error formatting and display onto the command line
	Adapt the parser and grammar to report errors
	  Ensure that as many syntax mistakes are caught as posible
	Adapt the stages to be exception safe 
	  Add in "noexcept" declarations
	  Ensure that everything is "const" declared (if possible)
  Basic Types
    value/variable => type
  Type Inference
    explicit annotations within the ast
  Basic Function Definition
  Basic Function Calling
  Improve system benchmark collection
  Improve command line interface collection
  ...
  Converting Operators into function calls [ <- Needs mutability checking and references


# Note: Can take template+static_assert, or protected+public approaches to restrict allowable combinations