Current Project State
  mutability => immutable-by-default
  types =>
	custom: unimplemented
	generics: unimplemented
	inheritance: undetermined (not sure how inheritance will be handled, between Rust 'impl', C++ 'inheritance' or some mix)
    recognized => Int, Bool (literals and comparison operators)
	...
  variables => basic shadowing and scoping
  functions => basically implemented, no type checking, decl before use
  annotations => ignored

Current Project Plan
  Add in LLVM IR production stage
	Follow http://releases.llvm.org/6.0.1/docs/tutorial/index.html
	  https://eli.thegreenplace.net/2017/adventures-in-jit-compilation-part-3-llvm/
	  https://the-ravi-programming-language.readthedocs.io/en/latest/ravi-jit-initial.html
	  https://llvm.org/docs/ProgrammersManual.html#the-c-standard-template-library
	  Fill in LlvmIrGenerator to match the production of AsmGenerator
		IfBranch
		  Determine how to handle phi nodes
		    We might not even need to explicitly have phi nodes (if we just put all variables on the stack)
			  Maybe for mutable global variables (or type members? they're both far away)
			  I can come up with a format for how I "would" handle phi variables though
		  Determine how to "assign" a value to a if statement, that doesn't have an else branch
		    I think, from a language standpoint, this should have no value (so don't produce the "retval" code)
		Finally remove the asmjit dependency
	Look at modifying the compilation pipeline to accomodate the llvm ir changes
	  `compilation::frontend` takes the file/string input and produces the ast
	  `compilation::analyze` takes the ast and produces analysed ast
	  `compilation::translate` takes the final ast and produces llvm ir
	  `compilation::backend` takes the llvm ir and produces the final output (after optimizations/etc)
	  Figure out how I'll maintain spero state in the intepreter
	    We can easily maintain functions/globals across different repl lines within llvm
		However, old code won't be able to use those definitions as the spero state won't remember them
		  This will require major work with the "compile" interface (maybe even removal if the interpreter strays too far)
		  We could automatically "populate" the ast with the interfaces of the previous declarations
		    This should be enough to type/variable check until we get to llvm, where the interpreter will handle it
			Still need to manually modify this "pre-existing" declaration list (and create the interfaces)
	Produce "levelling" pass to transform initial ast into a more workable version
	  All symbols will map into a flat structure, with each entry having a unique id
	    All symbol references will, after this pass, operate through this "flat" index
		The symbol table at this pass will have no need to return `opt_t<...>` as the symbol can be assumed to exist
	  See what other structures we should "flatten"
	Look at reorganizing the file structure
	Look at including LLVM methods throughout the codebase
	  I think particularly for dynamic casts, LLVM could drastically help
	  There may also be pre-implemented `CompilationState` and `SymTable` style structures
	    Although I think we'll still have to make subclasses to be specific
	  Implement automatic converstion from spero::String to llvm::StringRef
	Look at changing analysis framework to automatically translate 'reassignments' into 'ssa assignments'
	  This is mostly to simplify the translation to llvm ir
	  The downside would be a slight complication with the type inference engine
		The type of a "reassigned" variable may be inferred as different than the original variable
    Merge the llvm-ir branch into master
	  Improve documentation and update readme
		
  Type Inference and Type Checking
    Read up on the MLsub type inference - see if I can figure out how to implement it
	  Implement a toy algorithm inside of a smaller program (with hardcoded types, etc.)
	  Transfer the toy algorithm over to this program
	Figure out how to load type information into the symbol table
	Intermediate Type Work (maybe)
	  Come up with a quick way to get from a Variable/Binding ast node to it's symbol table information
	    This would be quicker than running the full symbol table query
	  Add in assembly instructions specific for floats and booleans
	    Look at generalizing the binopcall assembly generation to account for type differences
	  Add in assembly steps for interacting with tuples
	    Implement AssignTuple assignment rule
		Implement indexing in the case that the indexed type is a tuple (and the index is an int literal)
		Abstract the assignment rules to simplify the logic
		  For an AssignTuple pattern, split into a series of 'AssignName' (only issue is regarding when scopes come into effect)

  Get functions working properly
	Look into how to support local functions/closures
	  Figure out a better way of tracking ebp/etc. so that local variables are accessable
	    This work would mostly be done in terms of the global functions
		  However, I need to consider non-local functions for true generality
	  Figure out where I would have to store the function data in order for it to be usable
	    NOTE: I only need to consider this problem from the widest possible standpoint (any optimizations can be done later)
		  They could be inlined in some cases (if they're never used outside of the function), but starting there would be terrible design
    Convert operators to method calls
	  Create a system for harcoding in spero implementations (for now)
	    Eventually this will be replaced by spero code, but that requires asm/IR and modules to be completed first
	  Convert operator calls to being function calls (instead of hardcoded assembly calls)
	  Implement basic type-checking/etc. to automatically select the correct functions based on operand types
	  Implement boolean short-circuiting for && and ||
	    Will require hard-coding these checks in the compiler (as methods automatically evaluate first)
	Integrate functions into the type system
	  Figure out how to get function types working as distinct types
	  Add in experimental code to the arguments to allow for restricting based on the type
  Fix grammar and ast properties
    Require directly affixing pointers and references to types
    Allow anon_type to be attached after 'var_val/atom' rules
  Modules and Imports

  Language Logic Checking
    Check if ':<var>' is (and should be) a legal typing
	  Another option is to reserve a keyword (such as "__global__")
	  Adjust the interpreter accordingly (':XX' are commands)
	Look into allowing "def Foo = Foo[Int]" type syntax
	  Reconsider a lot of the grammar for types definition, particularly for specializing generics
    Determine how "Array[Int, a]" would be resolved if a is a global constant (in the context of specialization)
	Figure out contexts to interpret "a :: T" as a type-check and not an annotation
    Figure out what type system I want to support
	  Ensure that it can be type-checked with the algebraic subtyping paper
	  Figure out how generic parameters are introduced/constrained in "impl"
	Flesh out the rules for mutability restrictions
	  Ensure they maintain the semantics I want to have
	Figure out what concurrency systems I want to focus on
    Figure out a way of simplifying mutable methods such as 'get'/'set'
      Find a way to make indexing really trivial (ie. reduce the number of rewrites)
      Thinking is whether I can find a way to cast 'mut' as a monad/HKT parameter
        The guess is you'd then be able to 'map' over it or something like that
	  Find an interface that incourages slices (good range interop)
	Improve documentation, make sure it's up-to-date
	  Write down how function forwarding is going to be determined in lambdas
	    Utilize the same analysis pass that converts `plambda` to function declaration
	Junction typing syntax sometimes trips up common use cases (`3 :: Int + 4 :: Int` doesn't work)
	Look at re-allowing paren-less functions
	String should be unicode by default
	  I am still undecided about how that should be produced to the users
	    Provide utf-X byte points (ie. strings are arrays)
		Grapheme Clusters (Unicode defined "characters")
		"collation sequential primary element" (apparently a bit more natural "characters")
	  https://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/
	For simplicity sake, I'm going to work off of the initial assumption that types are laid out like in C
	  This assumption may change in the future, particularly to pack, so code should not depend on it
	I'm going full-in on Rust-style impl blocks for adding type inheritance/etc.
	  However, I want to relax the rules a bit (allow for defining traits at junction points, allow for defining traits through "this exists" [free function dispatch (can just do assignment)])
	  I'll also maintain the usage of impl blocks only for inheritance / type fitting
	    You can still define type specific methods inside of the declaration block
	Work on language tutorial/introduction

  Convert to using a tri-code IR (ie. max two operands to any instruction)
	Backend stage would take this IR and optimize it to produce the final assembly
	The current 'assembly' stage would be replaced with an IR-generation stage
	  Basically current stage is "AST -> Assembly", we would change to "AST -> IR" + "IR -> Assembly"

  Code Quality Improvements
    Change the test suit to have a folder-based organization structure
	  Instead of having the yaml file differentiate between the literal and function tests, the directory structure handles that difference
	  Each directory will have a yaml file listing out the expected results of the tests (at that level)
	    If a specific test suite is entered (such as literal.ints) then only the tests in the "literal/ints" folder will be run

  Improve error/exception handling and reporting
    Move around logging statements (when combined with push) to reuse location data (see if that makes an improvement first)
	Add in 'error indices' and automatic message population capbilities
    Add a better interaction between the ast classes and the logging system
      Improve the logging system while I'm at it (different log outputs, linked/combined loggers, etc.)
	Add in phase timing support using a 'PhaseTimer' style interface (see `compile` for usage)
	Modify the grammar to support unicode in strings
	  Look into allowing unicode in variable names

  Improve "help" support
    Look into adding "code of conduct"

  Basic Function Definition
    Update x86_interpreter/codegen to be able to specify start instruction
	Handle global declarations correctly (ie. place these values in 'separate' memory)
	  Figure out how to handle these separate addressing schemes

  Type Inference
    explicit annotations within the ast
  Basic Function Calling
  Custom type definition
  Improve system benchmark collection
  Improve command line interface collection
    Improve the handling of "flags" within the interpreter
  ...
  Converting Operators into function calls [ <- Needs mutability checking and references
  Allow for unicode variable names

  Tester Improvements
    Move to utilizing a directory based test system
	  Test "collections" will be determined by the folder they are in
	    Inside these folders is the yaml specifying expected behavior
		Individual tests may be able to run (ie. only run tests associated with collection.file)
    Have tester produce an output file specifying how many tests have passed
    Integrate this project with Jenkins CI
