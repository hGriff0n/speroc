Current Project State
  mutability => mutable-by-default [off-spec]
  types =>
    impl: hardcoded
	availability: standard-only
	generics: no
	inheritance: undetermined (not sure how inheritance will be handled, between Rust 'impl', C++ 'inheritance' or some mix)
    recognized => Int, Bool, ~Byte, ~Char
	...
  variables => partially-supported
  functions => main-only
  annotations => ignored

Current Project Plan
  Work on integrating the rust x86 interpreter
    Remove 'panic!' from codebase (really bad working)
    Work on improving the rust code
	  Expand the available memory to work with
      TODO: Need to add in some offsetting to accomodate assumed stack values (like variables currently assume that esp is pushed on the stack, which isn't the case for initial runs)
	Add ability to "save state", make into true 'repl'
  Extend SymTable working to scopes (ie. have scoped declarations)
    Change variables from being an entirely push/pop phenomenon (base of off ebp, preallocate stack space)
	  Split out storage of global/static values
	  Also be sure to "track" ebp offsets in a stack based fashion (for supporting local functions)
  Add error/exception handling and reporting
    Have error when a variable is used before it is declared in scopes/functions
	  Sometimes functions don't have an associated block, may need to modify ast to add one in
	  Need to ensure the solution works with types (REQUIRES: Separate variable analysis stage)
	  Need to have a two-pass system at least (may need to extend depending on how the type inference works)
	    The first pass records all variable declarations and their location
		The second pass records all variable usages and flags unused/forward-used/created variables
    Add in storage and reporting structures to CompilationState
	Adapt the analysis and codegen phases to report errors to the CompilationState
	Work on error formatting and display onto the command line
	Adapt the parser and grammar to report errors
	  Ensure that as many syntax mistakes are caught as posible
	Adapt the stages to be exception safe 
	  Add in "noexcept" declarations
	  Ensure that everything is "const" declared (if possible)
  Basic Mutability Tracking
    Modify 'SymTable' to track the mutability of the variable (this can be done within the current system)
	Throw errors when a Reassign node attempts to change the value of an immutable variable
	Create some test code to test the mutability checking
  Basic Types
    Add in tracking of variable/value types within the AST
	  Ensure that 'malformed' expressions can throw up type errors
	Add in handling of explicit annotations for automatically setting the types 
      Ensure these explicit annotations throw up errors on unrecognized types
  Abstract variables collection, etc. into a separate analysis phase
    Rework the visitor system to allow for modification of sub-nodes
	Have new system change VarAssign to Reassign nodes (after collecting relevant information)
	  Ensure this new change interacts correctly with the mutability checking (including with shadowing)
	Ensure this new system can handle "global" vars being defined post-facto
	  Ensure that we can also force variables to be defined "ahead of time"
	Rearrange codegen (or modify interpreter) to prevent these systems from interferring with each other (for post-facto variables)
	Look into adding in language for recognizing compound operators
	  A compound operator would map to a reassign<var, operator<var, val>>
  Basic Function Definition
    Update x86_interpreter/codegen to be able to specify start instruction
	Ensure compiler recognition of function defs and calls works correctly
	Perform codgen of function definitions and ensure they do not interfere with normal compilation
	  These initial functions should just return a value into the 'eax' register
	Add in argument handling/setting for function definitions and calling
	  Might just have a full stack-based solution for now
	  Make sure each "function body" has a 'SymTable' attached to it (for argument setting)
	  Ensure that recursive functions work
	Handle global declarations correctly (ie. place these values in 'separate' memory)
	  Figure out how to handle these separate addressing schemes
	Allow for function bodies to be scopes (with their own local variables)
      Look at possibly modifying the ast to force function wrapping (except possibly in forwarded contexts)
	    Actually, declarations really only make sense (and are somewhat only possible) in functions that already have a scope
	    For all functions, unless a scope is linked by a following block, assume the scope is 'current'
	  TODO: Need to modify 'ebp_offset' setting of the symtable (particularly when accessing "global"/"parent" variables)
        This is accounting for the effects of changing the stack pointers
  Type Inference
    explicit annotations within the ast
  Basic Function Calling
  Custom type definition
  Improve system benchmark collection
  Improve command line interface collection
    Improve the handling of "flags" within the interpreter
  ...
  Converting Operators into function calls [ <- Needs mutability checking and references


# Note: Can take template+static_assert, or protected+public approaches to restrict allowable combinations